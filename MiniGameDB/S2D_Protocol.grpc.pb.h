// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: S2D_Protocol.proto
#ifndef GRPC_S2D_5fProtocol_2eproto__INCLUDED
#define GRPC_S2D_5fProtocol_2eproto__INCLUDED

#include "S2D_Protocol.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace S2D_Protocol {

// 초기에 DB와 Server를 연결할 때, HandShake과정에서 연결 상태를 확인할 사용할 SayHello.
class S2D_Service final {
 public:
  static constexpr char const* service_full_name() {
    return "S2D_Protocol.S2D_Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::S2D_Protocol::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::S2D_Protocol::D2S_Login* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>> AsyncLoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>>(AsyncLoginRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>> PrepareAsyncLoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>>(PrepareAsyncLoginRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::S2D_Protocol::D2S_CreateAccount* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>> AsyncCreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>>(AsyncCreateAccountRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>> PrepareAsyncCreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>>(PrepareAsyncCreateAccountRequestRaw(context, request, cq));
    }
    // rpc RenewElosRequest (S2D_RenewElos) returns (D2S_RenewElos);
    virtual ::grpc::Status PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>> AsyncPlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>>(AsyncPlayerInfomationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>> PrepareAsyncPlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>>(PrepareAsyncPlayerInfomationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::S2D_Protocol::D2S_ResponseUpdateElo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>> AsyncUpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>>(AsyncUpdateEloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>> PrepareAsyncUpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>>(PrepareAsyncUpdateEloRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>> AsyncUpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>>(AsyncUpdatePersonalRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>> PrepareAsyncUpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>>(PrepareAsyncUpdatePersonalRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::S2D_Protocol::D2S_ResponsePublicRecord* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>> AsyncPublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>>(AsyncPublicRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>> PrepareAsyncPublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>>(PrepareAsyncPublicRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>> AsyncUpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>>(AsyncUpdatePublicRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>> PrepareAsyncUpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>>(PrepareAsyncUpdatePublicRecordRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // rpc RenewElosRequest (S2D_RenewElos) returns (D2S_RenewElos);
      virtual void PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>* AsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_Login>* PrepareAsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>* AsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_CreateAccount>* PrepareAsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* AsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* PrepareAsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>* AsyncUpdateEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdateElo>* PrepareAsyncUpdateEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* AsyncUpdatePersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* PrepareAsyncUpdatePersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>* AsyncPublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2S_ResponsePublicRecord>* PrepareAsyncPublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* AsyncUpdatePublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* PrepareAsyncUpdatePublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::S2D_Protocol::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::S2D_Protocol::D2S_Login* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>> AsyncLoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>>(AsyncLoginRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>> PrepareAsyncLoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>>(PrepareAsyncLoginRequestRaw(context, request, cq));
    }
    ::grpc::Status CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::S2D_Protocol::D2S_CreateAccount* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>> AsyncCreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>>(AsyncCreateAccountRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>> PrepareAsyncCreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>>(PrepareAsyncCreateAccountRequestRaw(context, request, cq));
    }
    ::grpc::Status PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>> AsyncPlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>>(AsyncPlayerInfomationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>> PrepareAsyncPlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>>(PrepareAsyncPlayerInfomationRaw(context, request, cq));
    }
    ::grpc::Status UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::S2D_Protocol::D2S_ResponseUpdateElo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>> AsyncUpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>>(AsyncUpdateEloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>> PrepareAsyncUpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>>(PrepareAsyncUpdateEloRaw(context, request, cq));
    }
    ::grpc::Status UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>> AsyncUpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>>(AsyncUpdatePersonalRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>> PrepareAsyncUpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>>(PrepareAsyncUpdatePersonalRecordRaw(context, request, cq));
    }
    ::grpc::Status PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::S2D_Protocol::D2S_ResponsePublicRecord* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>> AsyncPublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>>(AsyncPublicRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>> PrepareAsyncPublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>>(PrepareAsyncPublicRecordRaw(context, request, cq));
    }
    ::grpc::Status UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>> AsyncUpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>>(AsyncUpdatePublicRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>> PrepareAsyncUpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>>(PrepareAsyncUpdatePublicRecordRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, std::function<void(::grpc::Status)>) override;
      void LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, std::function<void(::grpc::Status)>) override;
      void CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, std::function<void(::grpc::Status)>) override;
      void PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response, std::function<void(::grpc::Status)>) override;
      void UpdateElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response, std::function<void(::grpc::Status)>) override;
      void UpdatePersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response, std::function<void(::grpc::Status)>) override;
      void PublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response, std::function<void(::grpc::Status)>) override;
      void UpdatePublicRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>* AsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>* PrepareAsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>* AsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>* PrepareAsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* AsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* PrepareAsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>* AsyncUpdateEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdateElo>* PrepareAsyncUpdateEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdateElo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* AsyncUpdatePersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* PrepareAsyncUpdatePersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>* AsyncPublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponsePublicRecord>* PrepareAsyncPublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* AsyncUpdatePublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* PrepareAsyncUpdatePublicRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_LoginRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccountRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_PlayerInfomation_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateElo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePersonalRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_PublicRecord_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePublicRecord_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response);
    virtual ::grpc::Status LoginRequest(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response);
    virtual ::grpc::Status CreateAccountRequest(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response);
    // rpc RenewElosRequest (S2D_RenewElos) returns (D2S_RenewElos);
    virtual ::grpc::Status PlayerInfomation(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response);
    virtual ::grpc::Status UpdateElo(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response);
    virtual ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response);
    virtual ::grpc::Status PublicRecord(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response);
    virtual ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::S2D_Protocol::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoginRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginRequest(::grpc::ServerContext* context, ::S2D_Protocol::S2D_Login* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2S_Login>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccountRequest(::grpc::ServerContext* context, ::S2D_Protocol::S2D_CreateAccount* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2S_CreateAccount>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayerInfomation(::grpc::ServerContext* context, ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateElo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateElo(::grpc::ServerContext* context, ::S2D_Protocol::S2D_TryUpdateElo* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2S_ResponseUpdateElo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePersonalRecord(::grpc::ServerContext* context, ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PublicRecord() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublicRecord(::grpc::ServerContext* context, ::S2D_Protocol::S2D_RequestPublicRecord* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2S_ResponsePublicRecord>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePublicRecord(::grpc::ServerContext* context, ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::grpc::ServerAsyncResponseWriter< ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_LoginRequest<WithAsyncMethod_CreateAccountRequest<WithAsyncMethod_PlayerInfomation<WithAsyncMethod_UpdateElo<WithAsyncMethod_UpdatePersonalRecord<WithAsyncMethod_PublicRecord<WithAsyncMethod_UpdatePublicRecord<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoginRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response) { return this->LoginRequest(context, request, response); }));}
    void SetMessageAllocatorFor_LoginRequest(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoginRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response) { return this->CreateAccountRequest(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccountRequest(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccountRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response) { return this->PlayerInfomation(context, request, response); }));}
    void SetMessageAllocatorFor_PlayerInfomation(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayerInfomation(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateElo() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdateElo, ::S2D_Protocol::D2S_ResponseUpdateElo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_TryUpdateElo* request, ::S2D_Protocol::D2S_ResponseUpdateElo* response) { return this->UpdateElo(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateElo(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_TryUpdateElo, ::S2D_Protocol::D2S_ResponseUpdateElo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdateElo, ::S2D_Protocol::D2S_ResponseUpdateElo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateElo(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdatePersonalRecord, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* request, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* response) { return this->UpdatePersonalRecord(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePersonalRecord(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_TryUpdatePersonalRecord, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdatePersonalRecord, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePersonalRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PublicRecord() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_RequestPublicRecord, ::S2D_Protocol::D2S_ResponsePublicRecord>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_RequestPublicRecord* request, ::S2D_Protocol::D2S_ResponsePublicRecord* response) { return this->PublicRecord(context, request, response); }));}
    void SetMessageAllocatorFor_PublicRecord(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_RequestPublicRecord, ::S2D_Protocol::D2S_ResponsePublicRecord>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_RequestPublicRecord, ::S2D_Protocol::D2S_ResponsePublicRecord>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublicRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdatePublicRecord, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* request, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* response) { return this->UpdatePublicRecord(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePublicRecord(
        ::grpc::MessageAllocator< ::S2D_Protocol::S2D_TryUpdatePublicRecord, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::S2D_Protocol::S2D_TryUpdatePublicRecord, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePublicRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SayHello<WithCallbackMethod_LoginRequest<WithCallbackMethod_CreateAccountRequest<WithCallbackMethod_PlayerInfomation<WithCallbackMethod_UpdateElo<WithCallbackMethod_UpdatePersonalRecord<WithCallbackMethod_PublicRecord<WithCallbackMethod_UpdatePublicRecord<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoginRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateElo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PublicRecord() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoginRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoginRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccountRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlayerInfomation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateElo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateElo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePersonalRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PublicRecord() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublicRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePublicRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoginRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoginRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoginRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccountRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateAccountRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlayerInfomation(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlayerInfomation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateElo() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateElo(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateElo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePersonalRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePersonalRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PublicRecord() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PublicRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PublicRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePublicRecord(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdatePublicRecord(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::HelloRequest* /*request*/, ::S2D_Protocol::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::HelloRequest,::S2D_Protocol::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoginRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoginRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login>* streamer) {
                       return this->StreamedLoginRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoginRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoginRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_Login* /*request*/, ::S2D_Protocol::D2S_Login* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoginRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_Login,::S2D_Protocol::D2S_Login>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccountRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccountRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount>* streamer) {
                       return this->StreamedCreateAccountRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccountRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccountRequest(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_CreateAccount* /*request*/, ::S2D_Protocol::D2S_CreateAccount* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccountRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_CreateAccount,::S2D_Protocol::D2S_CreateAccount>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlayerInfomation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlayerInfomation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation>* streamer) {
                       return this->StreamedPlayerInfomation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlayerInfomation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlayerInfomation(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPlayerInfomation* /*request*/, ::S2D_Protocol::D2C_ResponsePlayerInfomation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlayerInfomation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_RequestPlayerInfomation,::S2D_Protocol::D2C_ResponsePlayerInfomation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateElo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateElo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_TryUpdateElo, ::S2D_Protocol::D2S_ResponseUpdateElo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_TryUpdateElo, ::S2D_Protocol::D2S_ResponseUpdateElo>* streamer) {
                       return this->StreamedUpdateElo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateElo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateElo(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdateElo* /*request*/, ::S2D_Protocol::D2S_ResponseUpdateElo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateElo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_TryUpdateElo,::S2D_Protocol::D2S_ResponseUpdateElo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePersonalRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePersonalRecord() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_TryUpdatePersonalRecord, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_TryUpdatePersonalRecord, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* streamer) {
                       return this->StreamedUpdatePersonalRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePersonalRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePersonalRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePersonalRecord* /*request*/, ::S2D_Protocol::D2S_ResponseUpdatePersonalRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePersonalRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_TryUpdatePersonalRecord,::S2D_Protocol::D2S_ResponseUpdatePersonalRecord>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PublicRecord() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_RequestPublicRecord, ::S2D_Protocol::D2S_ResponsePublicRecord>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_RequestPublicRecord, ::S2D_Protocol::D2S_ResponsePublicRecord>* streamer) {
                       return this->StreamedPublicRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_RequestPublicRecord* /*request*/, ::S2D_Protocol::D2S_ResponsePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublicRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_RequestPublicRecord,::S2D_Protocol::D2S_ResponsePublicRecord>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePublicRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePublicRecord() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::S2D_Protocol::S2D_TryUpdatePublicRecord, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::S2D_Protocol::S2D_TryUpdatePublicRecord, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* streamer) {
                       return this->StreamedUpdatePublicRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePublicRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePublicRecord(::grpc::ServerContext* /*context*/, const ::S2D_Protocol::S2D_TryUpdatePublicRecord* /*request*/, ::S2D_Protocol::D2C_ResponseUpdatePublicRecord* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePublicRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::S2D_Protocol::S2D_TryUpdatePublicRecord,::S2D_Protocol::D2C_ResponseUpdatePublicRecord>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_LoginRequest<WithStreamedUnaryMethod_CreateAccountRequest<WithStreamedUnaryMethod_PlayerInfomation<WithStreamedUnaryMethod_UpdateElo<WithStreamedUnaryMethod_UpdatePersonalRecord<WithStreamedUnaryMethod_PublicRecord<WithStreamedUnaryMethod_UpdatePublicRecord<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_LoginRequest<WithStreamedUnaryMethod_CreateAccountRequest<WithStreamedUnaryMethod_PlayerInfomation<WithStreamedUnaryMethod_UpdateElo<WithStreamedUnaryMethod_UpdatePersonalRecord<WithStreamedUnaryMethod_PublicRecord<WithStreamedUnaryMethod_UpdatePublicRecord<Service > > > > > > > > StreamedService;
};

}  // namespace S2D_Protocol


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_S2D_5fProtocol_2eproto__INCLUDED
