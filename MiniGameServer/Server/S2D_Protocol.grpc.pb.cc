// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: S2D_Protocol.proto

#include "S2D_Protocol.pb.h"
#include "S2D_Protocol.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace S2D_Protocol {

static const char* S2D_Service_method_names[] = {
  "/S2D_Protocol.S2D_Service/SayHello",
  "/S2D_Protocol.S2D_Service/LoginRequest",
  "/S2D_Protocol.S2D_Service/CreateAccountRequest",
  "/S2D_Protocol.S2D_Service/RenewElosRequest",
  "/S2D_Protocol.S2D_Service/PlayerInfomation",
  "/S2D_Protocol.S2D_Service/RenewElo",
  "/S2D_Protocol.S2D_Service/RenewPersonalRecord",
};

std::unique_ptr< S2D_Service::Stub> S2D_Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< S2D_Service::Stub> stub(new S2D_Service::Stub(channel, options));
  return stub;
}

S2D_Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SayHello_(S2D_Service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoginRequest_(S2D_Service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAccountRequest_(S2D_Service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewElosRequest_(S2D_Service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayerInfomation_(S2D_Service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewElo_(S2D_Service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RenewPersonalRecord_(S2D_Service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status S2D_Service::Stub::SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::S2D_Protocol::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void S2D_Service::Stub::async::SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::SayHello(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>* S2D_Service::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::HelloReply, ::S2D_Protocol::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::HelloReply>* S2D_Service::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::S2D_Protocol::D2S_Login* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoginRequest_, context, request, response);
}

void S2D_Service::Stub::async::LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginRequest_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::LoginRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoginRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>* S2D_Service::Stub::PrepareAsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2S_Login, ::S2D_Protocol::S2D_Login, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoginRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_Login>* S2D_Service::Stub::AsyncLoginRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_Login& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::S2D_Protocol::D2S_CreateAccount* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccountRequest_, context, request, response);
}

void S2D_Service::Stub::async::CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccountRequest_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::CreateAccountRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccountRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>* S2D_Service::Stub::PrepareAsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2S_CreateAccount, ::S2D_Protocol::S2D_CreateAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccountRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_CreateAccount>* S2D_Service::Stub::AsyncCreateAccountRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_CreateAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::RenewElosRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RenewElos& request, ::S2D_Protocol::D2S_RenewElos* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_RenewElos, ::S2D_Protocol::D2S_RenewElos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewElosRequest_, context, request, response);
}

void S2D_Service::Stub::async::RenewElosRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RenewElos* request, ::S2D_Protocol::D2S_RenewElos* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_RenewElos, ::S2D_Protocol::D2S_RenewElos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewElosRequest_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::RenewElosRequest(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RenewElos* request, ::S2D_Protocol::D2S_RenewElos* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewElosRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_RenewElos>* S2D_Service::Stub::PrepareAsyncRenewElosRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RenewElos& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2S_RenewElos, ::S2D_Protocol::S2D_RenewElos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewElosRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_RenewElos>* S2D_Service::Stub::AsyncRenewElosRequestRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RenewElos& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewElosRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayerInfomation_, context, request, response);
}

void S2D_Service::Stub::async::PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayerInfomation_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::PlayerInfomation(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayerInfomation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* S2D_Service::Stub::PrepareAsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2C_ResponsePlayerInfomation, ::S2D_Protocol::S2D_RequestPlayerInfomation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayerInfomation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2C_ResponsePlayerInfomation>* S2D_Service::Stub::AsyncPlayerInfomationRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayerInfomationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::RenewElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewElo& request, ::S2D_Protocol::D2S_ResponseRenewElo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_TryRenewElo, ::S2D_Protocol::D2S_ResponseRenewElo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewElo_, context, request, response);
}

void S2D_Service::Stub::async::RenewElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewElo* request, ::S2D_Protocol::D2S_ResponseRenewElo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_TryRenewElo, ::S2D_Protocol::D2S_ResponseRenewElo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewElo_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::RenewElo(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewElo* request, ::S2D_Protocol::D2S_ResponseRenewElo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewElo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseRenewElo>* S2D_Service::Stub::PrepareAsyncRenewEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewElo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2S_ResponseRenewElo, ::S2D_Protocol::S2D_TryRenewElo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewElo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseRenewElo>* S2D_Service::Stub::AsyncRenewEloRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewElo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewEloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status S2D_Service::Stub::RenewPersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord& request, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord* response) {
  return ::grpc::internal::BlockingUnaryCall< ::S2D_Protocol::S2D_TryRenewPersonalRecord, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RenewPersonalRecord_, context, request, response);
}

void S2D_Service::Stub::async::RenewPersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord* request, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::S2D_Protocol::S2D_TryRenewPersonalRecord, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewPersonalRecord_, context, request, response, std::move(f));
}

void S2D_Service::Stub::async::RenewPersonalRecord(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord* request, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RenewPersonalRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseRenewPersonalRecord>* S2D_Service::Stub::PrepareAsyncRenewPersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::S2D_Protocol::D2S_ResponseRenewPersonalRecord, ::S2D_Protocol::S2D_TryRenewPersonalRecord, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RenewPersonalRecord_, context, request);
}

::grpc::ClientAsyncResponseReader< ::S2D_Protocol::D2S_ResponseRenewPersonalRecord>* S2D_Service::Stub::AsyncRenewPersonalRecordRaw(::grpc::ClientContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRenewPersonalRecordRaw(context, request, cq);
  result->StartCall();
  return result;
}

S2D_Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::HelloRequest, ::S2D_Protocol::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::HelloRequest* req,
             ::S2D_Protocol::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_Login, ::S2D_Protocol::D2S_Login, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_Login* req,
             ::S2D_Protocol::D2S_Login* resp) {
               return service->LoginRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_CreateAccount, ::S2D_Protocol::D2S_CreateAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_CreateAccount* req,
             ::S2D_Protocol::D2S_CreateAccount* resp) {
               return service->CreateAccountRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_RenewElos, ::S2D_Protocol::D2S_RenewElos, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_RenewElos* req,
             ::S2D_Protocol::D2S_RenewElos* resp) {
               return service->RenewElosRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_RequestPlayerInfomation, ::S2D_Protocol::D2C_ResponsePlayerInfomation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_RequestPlayerInfomation* req,
             ::S2D_Protocol::D2C_ResponsePlayerInfomation* resp) {
               return service->PlayerInfomation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_TryRenewElo, ::S2D_Protocol::D2S_ResponseRenewElo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_TryRenewElo* req,
             ::S2D_Protocol::D2S_ResponseRenewElo* resp) {
               return service->RenewElo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      S2D_Service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< S2D_Service::Service, ::S2D_Protocol::S2D_TryRenewPersonalRecord, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](S2D_Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::S2D_Protocol::S2D_TryRenewPersonalRecord* req,
             ::S2D_Protocol::D2S_ResponseRenewPersonalRecord* resp) {
               return service->RenewPersonalRecord(ctx, req, resp);
             }, this)));
}

S2D_Service::Service::~Service() {
}

::grpc::Status S2D_Service::Service::SayHello(::grpc::ServerContext* context, const ::S2D_Protocol::HelloRequest* request, ::S2D_Protocol::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::LoginRequest(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_Login* request, ::S2D_Protocol::D2S_Login* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::CreateAccountRequest(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_CreateAccount* request, ::S2D_Protocol::D2S_CreateAccount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::RenewElosRequest(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_RenewElos* request, ::S2D_Protocol::D2S_RenewElos* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::PlayerInfomation(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_RequestPlayerInfomation* request, ::S2D_Protocol::D2C_ResponsePlayerInfomation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::RenewElo(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_TryRenewElo* request, ::S2D_Protocol::D2S_ResponseRenewElo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status S2D_Service::Service::RenewPersonalRecord(::grpc::ServerContext* context, const ::S2D_Protocol::S2D_TryRenewPersonalRecord* request, ::S2D_Protocol::D2S_ResponseRenewPersonalRecord* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace S2D_Protocol

