// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: S2C_Protocol_Enum.proto
// Protobuf C++ Version: 5.29.5

#ifndef S2C_5fProtocol_5fEnum_2eproto_2epb_2eh
#define S2C_5fProtocol_5fEnum_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_S2C_5fProtocol_5fEnum_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_S2C_5fProtocol_5fEnum_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_S2C_5fProtocol_5fEnum_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace S2C_Protocol {
enum MsgId : int {
  S_WELCOME = 0,
  C_WELCOME = 1,
  S_WELCOME_RESPONSE = 2,
  S_ENCRYPTED = 3,
  C_ENCRYPTED = 4,
  C_LOGIN = 5,
  S_LOGIN = 6,
  C_CREATE_ACCOUNT = 7,
  S_CREATE_ACCOUNT = 8,
  C_LOGOUT = 9,
  S_LOGOUT = 10,
  C_MATCHMAKE_REQUEST = 11,
  S_MATCHMAKE_REQUEST = 12,
  C_MATCHMAKE_CANCEL = 13,
  S_MATCHMAKE_CANCEL = 14,
  S_MATCHMAKE_KEEP_ALIVE = 15,
  C_MATCHMAKE_KEEP_ALIVE = 16,
  S_REDO_MATCHMAKE = 17,
  S_EXCLUDED_FROM_MATCH = 18,
  S_MATCHMAKE_COMPLETED = 19,
  C_GAME_SCENE_LOADING_PROGRESS = 20,
  S_GAME_STARTED = 21,
  C_REQUEST_GAME_STATE = 22,
  S_TESTGAME_STATE = 23,
  S_PINGPONG_STATE = 24,
  S_DANMAKU_STATE = 25,
  MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgId_IsValid(int value);
extern const uint32_t MsgId_internal_data_[];
constexpr MsgId MsgId_MIN = static_cast<MsgId>(0);
constexpr MsgId MsgId_MAX = static_cast<MsgId>(25);
constexpr int MsgId_ARRAYSIZE = 25 + 1;
const ::google::protobuf::EnumDescriptor*
MsgId_descriptor();
template <typename T>
const std::string& MsgId_Name(T value) {
  static_assert(std::is_same<T, MsgId>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgId_Name().");
  return MsgId_Name(static_cast<MsgId>(value));
}
template <>
inline const std::string& MsgId_Name(MsgId value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MsgId_descriptor,
                                                 0, 25>(
      static_cast<int>(value));
}
inline bool MsgId_Parse(absl::string_view name, MsgId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgId>(
      MsgId_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace S2C_Protocol


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::S2C_Protocol::MsgId> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::S2C_Protocol::MsgId>() {
  return ::S2C_Protocol::MsgId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // S2C_5fProtocol_5fEnum_2eproto_2epb_2eh
