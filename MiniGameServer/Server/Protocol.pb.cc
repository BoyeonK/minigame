// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR S_Encrypted::S_Encrypted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ciphertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EncryptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EncryptedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EncryptedDefaultTypeInternal() {}
  union {
    S_Encrypted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EncryptedDefaultTypeInternal _S_Encrypted_default_instance_;
PROTOBUF_CONSTEXPR C_Encrypted::C_Encrypted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ciphertext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_EncryptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_EncryptedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_EncryptedDefaultTypeInternal() {}
  union {
    C_Encrypted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_EncryptedDefaultTypeInternal _C_Encrypted_default_instance_;
PROTOBUF_CONSTEXPR S_Welcome::S_Welcome(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gameversion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_WelcomeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WelcomeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WelcomeDefaultTypeInternal() {}
  union {
    S_Welcome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WelcomeDefaultTypeInternal _S_Welcome_default_instance_;
PROTOBUF_CONSTEXPR C_Welcome::C_Welcome(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aeskey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_WelcomeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_WelcomeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_WelcomeDefaultTypeInternal() {}
  union {
    C_Welcome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_WelcomeDefaultTypeInternal _C_Welcome_default_instance_;
PROTOBUF_CONSTEXPR S_WelcomeResponse::S_WelcomeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_WelcomeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_WelcomeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_WelcomeResponseDefaultTypeInternal() {}
  union {
    S_WelcomeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_WelcomeResponseDefaultTypeInternal _S_WelcomeResponse_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Protocol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Encrypted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Encrypted, _impl_.iv_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Encrypted, _impl_.ciphertext_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Encrypted, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Encrypted, _impl_.msgid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Encrypted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Encrypted, _impl_.iv_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Encrypted, _impl_.ciphertext_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Encrypted, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Encrypted, _impl_.msgid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Welcome, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_Welcome, _impl_.gameversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Welcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Welcome, _impl_.aeskey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_Welcome, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WelcomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WelcomeResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_WelcomeResponse, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::S_Encrypted)},
  { 10, -1, -1, sizeof(::Protocol::C_Encrypted)},
  { 20, -1, -1, sizeof(::Protocol::S_Welcome)},
  { 28, -1, -1, sizeof(::Protocol::C_Welcome)},
  { 36, -1, -1, sizeof(::Protocol::S_WelcomeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_S_Encrypted_default_instance_._instance,
  &::Protocol::_C_Encrypted_default_instance_._instance,
  &::Protocol::_S_Welcome_default_instance_._instance,
  &::Protocol::_C_Welcome_default_instance_._instance,
  &::Protocol::_S_WelcomeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\"I\n\013S_Encrypte"
  "d\022\n\n\002iv\030\001 \001(\014\022\022\n\nciphertext\030\002 \001(\014\022\013\n\003tag"
  "\030\003 \001(\014\022\r\n\005msgId\030\004 \001(\005\"I\n\013C_Encrypted\022\n\n\002"
  "iv\030\001 \001(\014\022\022\n\nciphertext\030\002 \001(\014\022\013\n\003tag\030\003 \001("
  "\014\022\r\n\005msgId\030\004 \001(\005\"3\n\tS_Welcome\022\021\n\tpublicK"
  "ey\030\001 \001(\014\022\023\n\013gameversion\030\002 \001(\005\",\n\tC_Welco"
  "me\022\016\n\006aesKey\030\001 \001(\014\022\017\n\007message\030\002 \001(\t\"5\n\021S"
  "_WelcomeResponse\022\017\n\007message\030\001 \001(\t\022\017\n\007suc"
  "cess\030\002 \001(\010*_\n\005MsgId\022\017\n\013S_ENCRYPTED\020\000\022\017\n\013"
  "C_ENCRYPTED\020\001\022\r\n\tS_WELCOME\020\002\022\r\n\tC_WELCOM"
  "E\020\003\022\026\n\022S_WELCOME_RESPONSE\020\004B\033\252\002\030Google.P"
  "rotobuf.Protocolb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 464, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Protocol_2eproto);
  return file_level_enum_descriptors_Protocol_2eproto[0];
}
bool MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_Encrypted::_Internal {
 public:
};

S_Encrypted::S_Encrypted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Encrypted)
}
S_Encrypted::S_Encrypted(const S_Encrypted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Encrypted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.ciphertext_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.msgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ciphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ciphertext().empty()) {
    _this->_impl_.ciphertext_.Set(from._internal_ciphertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msgid_ = from._impl_.msgid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Encrypted)
}

inline void S_Encrypted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.ciphertext_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.msgid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ciphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_Encrypted::~S_Encrypted() {
  // @@protoc_insertion_point(destructor:Protocol.S_Encrypted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Encrypted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iv_.Destroy();
  _impl_.ciphertext_.Destroy();
  _impl_.tag_.Destroy();
}

void S_Encrypted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Encrypted::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Encrypted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iv_.ClearToEmpty();
  _impl_.ciphertext_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Encrypted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes iv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ciphertext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ciphertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Encrypted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Encrypted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes iv = 1;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_iv(), target);
  }

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ciphertext(), target);
  }

  // bytes tag = 3;
  if (!this->_internal_tag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // int32 msgId = 4;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Encrypted)
  return target;
}

size_t S_Encrypted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Encrypted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes iv = 1;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ciphertext());
  }

  // bytes tag = 3;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tag());
  }

  // int32 msgId = 4;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Encrypted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Encrypted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Encrypted::GetClassData() const { return &_class_data_; }


void S_Encrypted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Encrypted*>(&to_msg);
  auto& from = static_cast<const S_Encrypted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Encrypted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (!from._internal_ciphertext().empty()) {
    _this->_internal_set_ciphertext(from._internal_ciphertext());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Encrypted::CopyFrom(const S_Encrypted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Encrypted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Encrypted::IsInitialized() const {
  return true;
}

void S_Encrypted::InternalSwap(S_Encrypted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ciphertext_, lhs_arena,
      &other->_impl_.ciphertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Encrypted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class C_Encrypted::_Internal {
 public:
};

C_Encrypted::C_Encrypted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Encrypted)
}
C_Encrypted::C_Encrypted(const C_Encrypted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Encrypted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.ciphertext_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.msgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ciphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ciphertext().empty()) {
    _this->_impl_.ciphertext_.Set(from._internal_ciphertext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msgid_ = from._impl_.msgid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Encrypted)
}

inline void C_Encrypted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.ciphertext_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.msgid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ciphertext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Encrypted::~C_Encrypted() {
  // @@protoc_insertion_point(destructor:Protocol.C_Encrypted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Encrypted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iv_.Destroy();
  _impl_.ciphertext_.Destroy();
  _impl_.tag_.Destroy();
}

void C_Encrypted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Encrypted::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Encrypted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iv_.ClearToEmpty();
  _impl_.ciphertext_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.msgid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Encrypted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes iv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ciphertext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ciphertext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 msgId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Encrypted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Encrypted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes iv = 1;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_iv(), target);
  }

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ciphertext(), target);
  }

  // bytes tag = 3;
  if (!this->_internal_tag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // int32 msgId = 4;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_msgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Encrypted)
  return target;
}

size_t C_Encrypted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Encrypted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes iv = 1;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // bytes ciphertext = 2;
  if (!this->_internal_ciphertext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ciphertext());
  }

  // bytes tag = 3;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tag());
  }

  // int32 msgId = 4;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Encrypted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Encrypted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Encrypted::GetClassData() const { return &_class_data_; }


void C_Encrypted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Encrypted*>(&to_msg);
  auto& from = static_cast<const C_Encrypted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Encrypted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (!from._internal_ciphertext().empty()) {
    _this->_internal_set_ciphertext(from._internal_ciphertext());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Encrypted::CopyFrom(const C_Encrypted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Encrypted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Encrypted::IsInitialized() const {
  return true;
}

void C_Encrypted::InternalSwap(C_Encrypted* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ciphertext_, lhs_arena,
      &other->_impl_.ciphertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Encrypted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_Welcome::_Internal {
 public:
};

S_Welcome::S_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_Welcome)
}
S_Welcome::S_Welcome(const S_Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_Welcome* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.gameversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publickey().empty()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.gameversion_ = from._impl_.gameversion_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_Welcome)
}

inline void S_Welcome::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.gameversion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_Welcome::~S_Welcome() {
  // @@protoc_insertion_point(destructor:Protocol.S_Welcome)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
}

void S_Welcome::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_Welcome)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publickey_.ClearToEmpty();
  _impl_.gameversion_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Welcome::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes publicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gameversion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gameversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Welcome::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_Welcome)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // int32 gameversion = 2;
  if (this->_internal_gameversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameversion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_Welcome)
  return target;
}

size_t S_Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_Welcome)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  // int32 gameversion = 2;
  if (this->_internal_gameversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameversion());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Welcome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_Welcome::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Welcome::GetClassData() const { return &_class_data_; }


void S_Welcome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_Welcome*>(&to_msg);
  auto& from = static_cast<const S_Welcome&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_Welcome)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publickey().empty()) {
    _this->_internal_set_publickey(from._internal_publickey());
  }
  if (from._internal_gameversion() != 0) {
    _this->_internal_set_gameversion(from._internal_gameversion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Welcome::CopyFrom(const S_Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Welcome::IsInitialized() const {
  return true;
}

void S_Welcome::InternalSwap(S_Welcome* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  swap(_impl_.gameversion_, other->_impl_.gameversion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Welcome::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C_Welcome::_Internal {
 public:
};

C_Welcome::C_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_Welcome)
}
C_Welcome::C_Welcome(const C_Welcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_Welcome* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aeskey_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.aeskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aeskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aeskey().empty()) {
    _this->_impl_.aeskey_.Set(from._internal_aeskey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_Welcome)
}

inline void C_Welcome::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aeskey_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aeskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aeskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_Welcome::~C_Welcome() {
  // @@protoc_insertion_point(destructor:Protocol.C_Welcome)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Welcome::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aeskey_.Destroy();
  _impl_.message_.Destroy();
}

void C_Welcome::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_Welcome::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_Welcome)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aeskey_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Welcome::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes aesKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_aeskey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_Welcome.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Welcome::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_Welcome)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes aesKey = 1;
  if (!this->_internal_aeskey().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_aeskey(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_Welcome.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_Welcome)
  return target;
}

size_t C_Welcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_Welcome)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes aesKey = 1;
  if (!this->_internal_aeskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aeskey());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Welcome::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_Welcome::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Welcome::GetClassData() const { return &_class_data_; }


void C_Welcome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_Welcome*>(&to_msg);
  auto& from = static_cast<const C_Welcome&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_Welcome)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aeskey().empty()) {
    _this->_internal_set_aeskey(from._internal_aeskey());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Welcome::CopyFrom(const C_Welcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_Welcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Welcome::IsInitialized() const {
  return true;
}

void C_Welcome::InternalSwap(C_Welcome* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aeskey_, lhs_arena,
      &other->_impl_.aeskey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Welcome::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_WelcomeResponse::_Internal {
 public:
};

S_WelcomeResponse::S_WelcomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_WelcomeResponse)
}
S_WelcomeResponse::S_WelcomeResponse(const S_WelcomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_WelcomeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_WelcomeResponse)
}

inline void S_WelcomeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_WelcomeResponse::~S_WelcomeResponse() {
  // @@protoc_insertion_point(destructor:Protocol.S_WelcomeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_WelcomeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void S_WelcomeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_WelcomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_WelcomeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_WelcomeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_WelcomeResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_WelcomeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_WelcomeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_WelcomeResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_WelcomeResponse)
  return target;
}

size_t S_WelcomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_WelcomeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_WelcomeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_WelcomeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_WelcomeResponse::GetClassData() const { return &_class_data_; }


void S_WelcomeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_WelcomeResponse*>(&to_msg);
  auto& from = static_cast<const S_WelcomeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_WelcomeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_WelcomeResponse::CopyFrom(const S_WelcomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_WelcomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_WelcomeResponse::IsInitialized() const {
  return true;
}

void S_WelcomeResponse::InternalSwap(S_WelcomeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_WelcomeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_Encrypted*
Arena::CreateMaybeMessage< ::Protocol::S_Encrypted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Encrypted >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Encrypted*
Arena::CreateMaybeMessage< ::Protocol::C_Encrypted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Encrypted >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_Welcome*
Arena::CreateMaybeMessage< ::Protocol::S_Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_Welcome*
Arena::CreateMaybeMessage< ::Protocol::C_Welcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_Welcome >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_WelcomeResponse*
Arena::CreateMaybeMessage< ::Protocol::S_WelcomeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_WelcomeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
