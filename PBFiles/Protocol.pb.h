// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_Encrypted;
struct C_EncryptedDefaultTypeInternal;
extern C_EncryptedDefaultTypeInternal _C_Encrypted_default_instance_;
class C_Welcome;
struct C_WelcomeDefaultTypeInternal;
extern C_WelcomeDefaultTypeInternal _C_Welcome_default_instance_;
class S_Encrypted;
struct S_EncryptedDefaultTypeInternal;
extern S_EncryptedDefaultTypeInternal _S_Encrypted_default_instance_;
class S_Welcome;
struct S_WelcomeDefaultTypeInternal;
extern S_WelcomeDefaultTypeInternal _S_Welcome_default_instance_;
class S_WelcomeResponse;
struct S_WelcomeResponseDefaultTypeInternal;
extern S_WelcomeResponseDefaultTypeInternal _S_WelcomeResponse_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_Encrypted* Arena::CreateMaybeMessage<::Protocol::C_Encrypted>(Arena*);
template<> ::Protocol::C_Welcome* Arena::CreateMaybeMessage<::Protocol::C_Welcome>(Arena*);
template<> ::Protocol::S_Encrypted* Arena::CreateMaybeMessage<::Protocol::S_Encrypted>(Arena*);
template<> ::Protocol::S_Welcome* Arena::CreateMaybeMessage<::Protocol::S_Welcome>(Arena*);
template<> ::Protocol::S_WelcomeResponse* Arena::CreateMaybeMessage<::Protocol::S_WelcomeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum MsgId : int {
  S_ENCRYPTED = 0,
  C_ENCRYPTED = 1,
  S_WELCOME = 2,
  C_WELCOME = 3,
  S_WELCOME_RESPONSE = 4,
  MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgId_IsValid(int value);
constexpr MsgId MsgId_MIN = S_ENCRYPTED;
constexpr MsgId MsgId_MAX = S_WELCOME_RESPONSE;
constexpr int MsgId_ARRAYSIZE = MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgId_descriptor();
template<typename T>
inline const std::string& MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgId_descriptor(), enum_t_value);
}
inline bool MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgId>(
    MsgId_descriptor(), name, value);
}
// ===================================================================

class S_Encrypted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Encrypted) */ {
 public:
  inline S_Encrypted() : S_Encrypted(nullptr) {}
  ~S_Encrypted() override;
  explicit PROTOBUF_CONSTEXPR S_Encrypted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Encrypted(const S_Encrypted& from);
  S_Encrypted(S_Encrypted&& from) noexcept
    : S_Encrypted() {
    *this = ::std::move(from);
  }

  inline S_Encrypted& operator=(const S_Encrypted& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Encrypted& operator=(S_Encrypted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Encrypted& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Encrypted* internal_default_instance() {
    return reinterpret_cast<const S_Encrypted*>(
               &_S_Encrypted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Encrypted& a, S_Encrypted& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Encrypted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Encrypted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Encrypted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Encrypted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Encrypted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Encrypted& from) {
    S_Encrypted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Encrypted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Encrypted";
  }
  protected:
  explicit S_Encrypted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIvFieldNumber = 1,
    kCiphertextFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // bytes iv = 1;
  void clear_iv();
  const std::string& iv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* iv);
  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(const std::string& value);
  std::string* _internal_mutable_iv();
  public:

  // bytes ciphertext = 2;
  void clear_ciphertext();
  const std::string& ciphertext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ciphertext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ciphertext();
  PROTOBUF_NODISCARD std::string* release_ciphertext();
  void set_allocated_ciphertext(std::string* ciphertext);
  private:
  const std::string& _internal_ciphertext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ciphertext(const std::string& value);
  std::string* _internal_mutable_ciphertext();
  public:

  // bytes tag = 3;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Encrypted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Encrypted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Encrypted) */ {
 public:
  inline C_Encrypted() : C_Encrypted(nullptr) {}
  ~C_Encrypted() override;
  explicit PROTOBUF_CONSTEXPR C_Encrypted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Encrypted(const C_Encrypted& from);
  C_Encrypted(C_Encrypted&& from) noexcept
    : C_Encrypted() {
    *this = ::std::move(from);
  }

  inline C_Encrypted& operator=(const C_Encrypted& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Encrypted& operator=(C_Encrypted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Encrypted& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Encrypted* internal_default_instance() {
    return reinterpret_cast<const C_Encrypted*>(
               &_C_Encrypted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_Encrypted& a, C_Encrypted& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Encrypted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Encrypted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Encrypted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Encrypted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Encrypted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Encrypted& from) {
    C_Encrypted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Encrypted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Encrypted";
  }
  protected:
  explicit C_Encrypted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIvFieldNumber = 1,
    kCiphertextFieldNumber = 2,
    kTagFieldNumber = 3,
  };
  // bytes iv = 1;
  void clear_iv();
  const std::string& iv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* iv);
  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(const std::string& value);
  std::string* _internal_mutable_iv();
  public:

  // bytes ciphertext = 2;
  void clear_ciphertext();
  const std::string& ciphertext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ciphertext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ciphertext();
  PROTOBUF_NODISCARD std::string* release_ciphertext();
  void set_allocated_ciphertext(std::string* ciphertext);
  private:
  const std::string& _internal_ciphertext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ciphertext(const std::string& value);
  std::string* _internal_mutable_ciphertext();
  public:

  // bytes tag = 3;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Encrypted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_Welcome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_Welcome) */ {
 public:
  inline S_Welcome() : S_Welcome(nullptr) {}
  ~S_Welcome() override;
  explicit PROTOBUF_CONSTEXPR S_Welcome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Welcome(const S_Welcome& from);
  S_Welcome(S_Welcome&& from) noexcept
    : S_Welcome() {
    *this = ::std::move(from);
  }

  inline S_Welcome& operator=(const S_Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Welcome& operator=(S_Welcome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Welcome& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Welcome* internal_default_instance() {
    return reinterpret_cast<const S_Welcome*>(
               &_S_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_Welcome& a, S_Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Welcome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Welcome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Welcome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_Welcome& from) {
    S_Welcome::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Welcome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_Welcome";
  }
  protected:
  explicit S_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kGameversionFieldNumber = 2,
  };
  // bytes publicKey = 1;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // int32 gameversion = 2;
  void clear_gameversion();
  int32_t gameversion() const;
  void set_gameversion(int32_t value);
  private:
  int32_t _internal_gameversion() const;
  void _internal_set_gameversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
    int32_t gameversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_Welcome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_Welcome) */ {
 public:
  inline C_Welcome() : C_Welcome(nullptr) {}
  ~C_Welcome() override;
  explicit PROTOBUF_CONSTEXPR C_Welcome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Welcome(const C_Welcome& from);
  C_Welcome(C_Welcome&& from) noexcept
    : C_Welcome() {
    *this = ::std::move(from);
  }

  inline C_Welcome& operator=(const C_Welcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Welcome& operator=(C_Welcome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Welcome& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Welcome* internal_default_instance() {
    return reinterpret_cast<const C_Welcome*>(
               &_C_Welcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_Welcome& a, C_Welcome& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Welcome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Welcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Welcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Welcome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Welcome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_Welcome& from) {
    C_Welcome::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Welcome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_Welcome";
  }
  protected:
  explicit C_Welcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAesKeyFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // bytes aesKey = 1;
  void clear_aeskey();
  const std::string& aeskey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aeskey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aeskey();
  PROTOBUF_NODISCARD std::string* release_aeskey();
  void set_allocated_aeskey(std::string* aeskey);
  private:
  const std::string& _internal_aeskey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aeskey(const std::string& value);
  std::string* _internal_mutable_aeskey();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_Welcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aeskey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_WelcomeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_WelcomeResponse) */ {
 public:
  inline S_WelcomeResponse() : S_WelcomeResponse(nullptr) {}
  ~S_WelcomeResponse() override;
  explicit PROTOBUF_CONSTEXPR S_WelcomeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_WelcomeResponse(const S_WelcomeResponse& from);
  S_WelcomeResponse(S_WelcomeResponse&& from) noexcept
    : S_WelcomeResponse() {
    *this = ::std::move(from);
  }

  inline S_WelcomeResponse& operator=(const S_WelcomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_WelcomeResponse& operator=(S_WelcomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_WelcomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_WelcomeResponse* internal_default_instance() {
    return reinterpret_cast<const S_WelcomeResponse*>(
               &_S_WelcomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_WelcomeResponse& a, S_WelcomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S_WelcomeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_WelcomeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_WelcomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_WelcomeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_WelcomeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_WelcomeResponse& from) {
    S_WelcomeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_WelcomeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_WelcomeResponse";
  }
  protected:
  explicit S_WelcomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_WelcomeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Encrypted

// bytes iv = 1;
inline void S_Encrypted::clear_iv() {
  _impl_.iv_.ClearToEmpty();
}
inline const std::string& S_Encrypted::iv() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Encrypted.iv)
  return _internal_iv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Encrypted::set_iv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Encrypted.iv)
}
inline std::string* S_Encrypted::mutable_iv() {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Encrypted.iv)
  return _s;
}
inline const std::string& S_Encrypted::_internal_iv() const {
  return _impl_.iv_.Get();
}
inline void S_Encrypted::_internal_set_iv(const std::string& value) {
  
  _impl_.iv_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Encrypted::_internal_mutable_iv() {
  
  return _impl_.iv_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Encrypted::release_iv() {
  // @@protoc_insertion_point(field_release:Protocol.S_Encrypted.iv)
  return _impl_.iv_.Release();
}
inline void S_Encrypted::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  _impl_.iv_.SetAllocated(iv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Encrypted.iv)
}

// bytes ciphertext = 2;
inline void S_Encrypted::clear_ciphertext() {
  _impl_.ciphertext_.ClearToEmpty();
}
inline const std::string& S_Encrypted::ciphertext() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Encrypted.ciphertext)
  return _internal_ciphertext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Encrypted::set_ciphertext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ciphertext_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Encrypted.ciphertext)
}
inline std::string* S_Encrypted::mutable_ciphertext() {
  std::string* _s = _internal_mutable_ciphertext();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Encrypted.ciphertext)
  return _s;
}
inline const std::string& S_Encrypted::_internal_ciphertext() const {
  return _impl_.ciphertext_.Get();
}
inline void S_Encrypted::_internal_set_ciphertext(const std::string& value) {
  
  _impl_.ciphertext_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Encrypted::_internal_mutable_ciphertext() {
  
  return _impl_.ciphertext_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Encrypted::release_ciphertext() {
  // @@protoc_insertion_point(field_release:Protocol.S_Encrypted.ciphertext)
  return _impl_.ciphertext_.Release();
}
inline void S_Encrypted::set_allocated_ciphertext(std::string* ciphertext) {
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  _impl_.ciphertext_.SetAllocated(ciphertext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ciphertext_.IsDefault()) {
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Encrypted.ciphertext)
}

// bytes tag = 3;
inline void S_Encrypted::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& S_Encrypted::tag() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Encrypted.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Encrypted::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Encrypted.tag)
}
inline std::string* S_Encrypted::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Encrypted.tag)
  return _s;
}
inline const std::string& S_Encrypted::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void S_Encrypted::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Encrypted::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Encrypted::release_tag() {
  // @@protoc_insertion_point(field_release:Protocol.S_Encrypted.tag)
  return _impl_.tag_.Release();
}
inline void S_Encrypted::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Encrypted.tag)
}

// -------------------------------------------------------------------

// C_Encrypted

// bytes iv = 1;
inline void C_Encrypted::clear_iv() {
  _impl_.iv_.ClearToEmpty();
}
inline const std::string& C_Encrypted::iv() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Encrypted.iv)
  return _internal_iv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Encrypted::set_iv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iv_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Encrypted.iv)
}
inline std::string* C_Encrypted::mutable_iv() {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Encrypted.iv)
  return _s;
}
inline const std::string& C_Encrypted::_internal_iv() const {
  return _impl_.iv_.Get();
}
inline void C_Encrypted::_internal_set_iv(const std::string& value) {
  
  _impl_.iv_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Encrypted::_internal_mutable_iv() {
  
  return _impl_.iv_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Encrypted::release_iv() {
  // @@protoc_insertion_point(field_release:Protocol.C_Encrypted.iv)
  return _impl_.iv_.Release();
}
inline void C_Encrypted::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  _impl_.iv_.SetAllocated(iv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Encrypted.iv)
}

// bytes ciphertext = 2;
inline void C_Encrypted::clear_ciphertext() {
  _impl_.ciphertext_.ClearToEmpty();
}
inline const std::string& C_Encrypted::ciphertext() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Encrypted.ciphertext)
  return _internal_ciphertext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Encrypted::set_ciphertext(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ciphertext_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Encrypted.ciphertext)
}
inline std::string* C_Encrypted::mutable_ciphertext() {
  std::string* _s = _internal_mutable_ciphertext();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Encrypted.ciphertext)
  return _s;
}
inline const std::string& C_Encrypted::_internal_ciphertext() const {
  return _impl_.ciphertext_.Get();
}
inline void C_Encrypted::_internal_set_ciphertext(const std::string& value) {
  
  _impl_.ciphertext_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Encrypted::_internal_mutable_ciphertext() {
  
  return _impl_.ciphertext_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Encrypted::release_ciphertext() {
  // @@protoc_insertion_point(field_release:Protocol.C_Encrypted.ciphertext)
  return _impl_.ciphertext_.Release();
}
inline void C_Encrypted::set_allocated_ciphertext(std::string* ciphertext) {
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  _impl_.ciphertext_.SetAllocated(ciphertext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ciphertext_.IsDefault()) {
    _impl_.ciphertext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Encrypted.ciphertext)
}

// bytes tag = 3;
inline void C_Encrypted::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& C_Encrypted::tag() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Encrypted.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Encrypted::set_tag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Encrypted.tag)
}
inline std::string* C_Encrypted::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Encrypted.tag)
  return _s;
}
inline const std::string& C_Encrypted::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void C_Encrypted::_internal_set_tag(const std::string& value) {
  
  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Encrypted::_internal_mutable_tag() {
  
  return _impl_.tag_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Encrypted::release_tag() {
  // @@protoc_insertion_point(field_release:Protocol.C_Encrypted.tag)
  return _impl_.tag_.Release();
}
inline void C_Encrypted::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  _impl_.tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tag_.IsDefault()) {
    _impl_.tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Encrypted.tag)
}

// -------------------------------------------------------------------

// S_Welcome

// bytes publicKey = 1;
inline void S_Welcome::clear_publickey() {
  _impl_.publickey_.ClearToEmpty();
}
inline const std::string& S_Welcome::publickey() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Welcome.publicKey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_Welcome::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.publickey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_Welcome.publicKey)
}
inline std::string* S_Welcome::mutable_publickey() {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:Protocol.S_Welcome.publicKey)
  return _s;
}
inline const std::string& S_Welcome::_internal_publickey() const {
  return _impl_.publickey_.Get();
}
inline void S_Welcome::_internal_set_publickey(const std::string& value) {
  
  _impl_.publickey_.Set(value, GetArenaForAllocation());
}
inline std::string* S_Welcome::_internal_mutable_publickey() {
  
  return _impl_.publickey_.Mutable(GetArenaForAllocation());
}
inline std::string* S_Welcome::release_publickey() {
  // @@protoc_insertion_point(field_release:Protocol.S_Welcome.publicKey)
  return _impl_.publickey_.Release();
}
inline void S_Welcome::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  _impl_.publickey_.SetAllocated(publickey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.publickey_.IsDefault()) {
    _impl_.publickey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_Welcome.publicKey)
}

// int32 gameversion = 2;
inline void S_Welcome::clear_gameversion() {
  _impl_.gameversion_ = 0;
}
inline int32_t S_Welcome::_internal_gameversion() const {
  return _impl_.gameversion_;
}
inline int32_t S_Welcome::gameversion() const {
  // @@protoc_insertion_point(field_get:Protocol.S_Welcome.gameversion)
  return _internal_gameversion();
}
inline void S_Welcome::_internal_set_gameversion(int32_t value) {
  
  _impl_.gameversion_ = value;
}
inline void S_Welcome::set_gameversion(int32_t value) {
  _internal_set_gameversion(value);
  // @@protoc_insertion_point(field_set:Protocol.S_Welcome.gameversion)
}

// -------------------------------------------------------------------

// C_Welcome

// bytes aesKey = 1;
inline void C_Welcome::clear_aeskey() {
  _impl_.aeskey_.ClearToEmpty();
}
inline const std::string& C_Welcome::aeskey() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Welcome.aesKey)
  return _internal_aeskey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Welcome::set_aeskey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aeskey_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Welcome.aesKey)
}
inline std::string* C_Welcome::mutable_aeskey() {
  std::string* _s = _internal_mutable_aeskey();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Welcome.aesKey)
  return _s;
}
inline const std::string& C_Welcome::_internal_aeskey() const {
  return _impl_.aeskey_.Get();
}
inline void C_Welcome::_internal_set_aeskey(const std::string& value) {
  
  _impl_.aeskey_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Welcome::_internal_mutable_aeskey() {
  
  return _impl_.aeskey_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Welcome::release_aeskey() {
  // @@protoc_insertion_point(field_release:Protocol.C_Welcome.aesKey)
  return _impl_.aeskey_.Release();
}
inline void C_Welcome::set_allocated_aeskey(std::string* aeskey) {
  if (aeskey != nullptr) {
    
  } else {
    
  }
  _impl_.aeskey_.SetAllocated(aeskey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aeskey_.IsDefault()) {
    _impl_.aeskey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Welcome.aesKey)
}

// string message = 2;
inline void C_Welcome::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& C_Welcome::message() const {
  // @@protoc_insertion_point(field_get:Protocol.C_Welcome.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_Welcome::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_Welcome.message)
}
inline std::string* C_Welcome::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.C_Welcome.message)
  return _s;
}
inline const std::string& C_Welcome::_internal_message() const {
  return _impl_.message_.Get();
}
inline void C_Welcome::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* C_Welcome::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* C_Welcome::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.C_Welcome.message)
  return _impl_.message_.Release();
}
inline void C_Welcome::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_Welcome.message)
}

// -------------------------------------------------------------------

// S_WelcomeResponse

// string message = 1;
inline void S_WelcomeResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S_WelcomeResponse::message() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WelcomeResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_WelcomeResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_WelcomeResponse.message)
}
inline std::string* S_WelcomeResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.S_WelcomeResponse.message)
  return _s;
}
inline const std::string& S_WelcomeResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void S_WelcomeResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* S_WelcomeResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* S_WelcomeResponse::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.S_WelcomeResponse.message)
  return _impl_.message_.Release();
}
inline void S_WelcomeResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_WelcomeResponse.message)
}

// bool success = 2;
inline void S_WelcomeResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool S_WelcomeResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool S_WelcomeResponse::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_WelcomeResponse.success)
  return _internal_success();
}
inline void S_WelcomeResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_WelcomeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_WelcomeResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MsgId>() {
  return ::Protocol::MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
